# Встроенные функции
# 1) Дан массив с числами. Создайте новый массив, состоящий из квадратов этих чисел.
# Вход:
# [1, 2, 3, 4, 5, 6, 7, 8, 9]
# Выход:
# [1, 4, 9, 16, 25, 36, 49, 64, 81]
# Требование:
# Использовать встроенные функции
# Подсказка: (map, list)

# from functools import reduce
# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]


# def my_sum(first, second):
#     return first * second

# result = reduce(my_sum, numbers)
# print(result)



# 2) Дан массив с числами. Найдите сумму этих чисел.
# Вход:,
# [1, 2, 3,]
# Выход:
# 6
# Требование:
# Использовать встроенные функции

# num = [1,2,3]
# print(sum(num))

# 3) Дан массив с числами. Проверьте то, что все элементы в массиве больше нуля.
# Вход:
# [1, 2, 3, 0, -1]
# Выход:
# False
# Вход:
# [1, 2, 3]
# Выход:
# True
# Требование:
# Использовать встроенные функции

# num = [1,2, 3, 0, -1]
# print(all(num))

# nums = [1,2,3]
# print(all(nums))

# 4) Дан массив с числами. Проверьте то, что в нем есть отрицательные элементы.
# Вход:
# [1, 2, 3, 0, -1]
# Выход:
# True
# Вход:
# [1, 2, 3]
# Выход:
# False
# Требование:
# Использовать встроенные функции

# chisla = [1,2,3,0, -1]
# print(any(chisla))

# number = [1,2,3]
# print(not any(number))

# 5) Дан массив с числами. Оставьте в нем только отрицательные числа
# Вход:
# [1, 2, 3, 0, -1]
# Выход:
# [-1]
# Требование:
# Использовать встроенные функции

# number = [1,2,3,0, -1]
# even_number = list(filter(lambda num: num  < 0, number))
# print(even_number)




# 6) Дан массив с числами. Оставьте в нем только четные числа
# Вход:
# [1, 2, 3, 0, -1]
# Выход:
# [2]
# Требование:
# Использовать встроенные функции

# list_ = [1,2,3,0,-1]
# even_list = list(filter(lambda num: num % 2 == 0, list_))
# print(even_list)

# 7) Дан массив со строками. Оставьте в нем только те строки, длина которых
# больше 6-ти символов
# Вход:
# [“hello”, “world”, “incapsulation”, “inheritance”]
# Выход:
# [“incapsulation”, “inheritance”]
# Требование:
# Использовать встроенные функции

# a = [“hello”, “world”, “incapsulation”, “inheritance”]
# b = list(filter(lambda if len(a) > 4 print(a) else none ))
# print(b)


# # 8) Дан массив с числами. Найдите результат умножения всех этих чисел.
# #  Вход:
# # # [1, 2, 3, 4]
# Выход:
# 10
# Требование:
# Использовать встроенную функцию Reduce

# from functools import reduce

# numbers = [1, 2, 3, 4]

# result = reduce(lambda num1, num2: num1 + num2, numbers )
# print(result)


# 9) Напишите программу, которая подсчитывает количество четных и нечетных
# чисел в списке чисел. (Используйте встроенные функции, чтобы решить эту
# задачу)
# Вход:
# [1, 2, 3, 4, 5, 6, 7, 8, 9]
# Выход:
# Количество нечетных чисел: 5
# Количество четных чисел: 4
# Требование:
# Использовать встроенные функции

# Подсказка: (map, len, filter, lambda ....)

# num = [1,2,3,4,5,6,7,8,9]
# even = 0
# odd = 0 
# while num > 0:
#     if a % 2 == 0:
#         even += 1
#     else:
#         odd += 1
#         num =num // 10

# print(even,odd)

# 10) Напишите программу, где исходный список содержит положительные и
# отрицательные числа. Требуется положительные поместить в один список, а
# отрицательные - в другой.
# Вход:
# [-1, 2, 3, 4, -5, 6, 7, -8, 9]
# Выход:
# Положительны: [2, 3, 4, 6, 7, 9]
# Отрицательные: [-1, -5, -8]
# Требование:
# Использовать встроенные функции
# Подсказка: (map, filter, lambda ....)

# num = [-1,2,3,4,-5,6,7,-8,9]
# num_odd = [x for x in num if x < 0]
# num_even = [x for x in num if x > 0]
# print(num_odd)
# print(num_even)



# 11) Напишите программу, в которой указан список целых чисел. Замените
# отрицательные на -1, положительные на 1, и оставить ноль без
# изменений.
# Вход:
# [-1, 2, 3, 4, -5, 6, 7, -8, 9, 0]
# Выход:
# [-1, 1, 1, -1, 1, 1, -1, 1, 0]
# Требование:
# Использовать встроенные функции
# Подсказка: (map, filter, lambda, if, str method replace,)

# nums = [-1, 2, 3, 4, -5, 6, 7, -8, 9, 0]

# positive_nums = list(map(lambda x: -1 if x < 0 else 1, nums)
# print(positive_nums)



# 12) Аналог “шифра цезаря “.
# Программа должна запрашивать элементы списка через пробел. После чего
# пользователь должен ввести значение для сдвига элементов списка. Значение
# может быть как положительным, так и отрицательным. Если значение
# положительное, элементы списка должны сдвигаться вправо, если
# отрицательное - влево. Результат необходимо вывести в терминале.
# Пример:
# Вход:
# [1, 2, 3, 4, 5] шаг сдвига=2
# Выход:
# [3, 4, 5, 1, 2]




# 13) https://www.hackerrank.com/challenges/arrays-ds/problem
# 14) https://www.hackerrank.com/challenges/balanced-brackets/problem?h_r=profile
